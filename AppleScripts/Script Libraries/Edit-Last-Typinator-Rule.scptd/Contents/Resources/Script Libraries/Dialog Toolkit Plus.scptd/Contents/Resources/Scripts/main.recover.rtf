{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 FiraCode-Retina;\f1\fnil\fcharset0 FiraCode-Bold;\f2\fnil\fcharset0 FiraCode-Medium;
}
{\colortbl;\red255\green255\blue255;\red102\green102\blue102;\red0\green0\blue0;\red255\green0\blue255;
\red0\green128\blue255;\red219\green112\blue9;\red0\green153\blue51;\red43\green131\blue159;\red23\green172\blue221;
\red0\green0\blue255;\red251\green2\blue7;}
{\*\expandedcolortbl;;\csgenericrgb\c40000\c40000\c40000;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c0\c100000;
\csgenericrgb\c0\c50196\c100000;\csgenericrgb\c86026\c44067\c3627;\csgenericrgb\c0\c60000\c20000;\csgenericrgb\c16899\c51199\c62499;\csgenericrgb\c9020\c67451\c86667;
\csgenericrgb\c0\c0\c100000;\csgenericrgb\c98624\c711\c2742;}
\deftab480
\pard\pardeftab480\slleading40\pardirnatural\partightenfactor0

\f0\fs26 \cf2 -- Created 2014-11-22 21:32:47 +1100 by Shane Stanley\cf3 \
\pard\pardeftab480\slleading40\pardirnatural\partightenfactor0
\cf2 -- Version 1.1.0. Based on 'Dialog Toolkit.scptd'.\cf3 \
\cf2 -- Copyright \'a92014-19. May be freely distributed and copied. If you modify it, please rename the modified version to avoid clashes.\cf3 \
\cf2 -- You use it entirely at your own risk.\cf3 \
\
\cf2 -- Place this file  in ~/Library/Script Libraries \cf3 \
\

\f1\b \cf3 use
\f0\b0 \cf3  
\f2 \cf4 AppleScript
\f0 \cf3  \cf5 version\cf3  \cf3 "2.4"\cf3 \

\f1\b \cf3 use
\f0\b0 \cf3  
\f2 \cf6 scripting additions
\f0 \cf3 \

\f1\b \cf3 use
\f0\b0 \cf3  
\f2 \cf6 framework
\f0 \cf3  \cf3 "Foundation"\cf3 \

\f1\b \cf3 use
\f0\b0 \cf3  
\f2 \cf6 framework
\f0 \cf3  \cf3 "AppKit"\cf3 \

\f1\b \cf3 use
\f0\b0 \cf3  
\f2 \cf6 framework
\f0 \cf3  \cf3 "Carbon"\cf3  \cf2 -- AEInteractWithUser() is in Carbon \cf3 \
\
\cf2 -- classes, constants, and enums used\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSOffState\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSStringDrawingUsesLineFragmentOrigin\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSNoImage\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSSmallControlSize\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSModalPanelWindowLevel\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 8\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSSwitchButton\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 3\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSModalResponseCancel\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSBoxSeparator\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 2\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSRadioButton\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 4\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSRoundedBezelStyle\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSMomentaryPushInButton\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 7\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSOnState\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSRadioModeMatrix\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSBackingStoreBuffered\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 2\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSPathStyleStandard\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSCommandKeyMask\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1048576\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSModalResponseAbort\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 -1001\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSLeftTextAlignment\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSNoTitle\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSRegularControlSize\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSCenterTextAlignment\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 2\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSPathStylePopUp\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 2\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSRightTextAlignment\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSLineBorder\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSMiniControlSize\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 2\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSTitledWindowMask\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSImage\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSImage\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSImageView\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSImageView\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSMatrix\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSMatrix\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSPathControl\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSPathControl\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSPopUpButton\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSPopUpButton\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSFont\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSFont\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSModalPanelRunLoopMode\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSModalPanelRunLoopMode\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSView\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSView\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSApp\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSApp\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSBox\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSBox\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSWindow\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSWindow\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSButtonCell\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSButtonCell\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSObject\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSObject\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSTextField\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSTextField\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSString\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSString\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 |NSURL|\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 |NSURL|\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSScreen\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSScreen\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSAlert\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSAlert\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSButton\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSButton\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSFontAttributeName\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSFontAttributeName\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSThread\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSThread\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSDictionary\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSDictionary\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSAttributedString\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSAttributedString\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 NSSecureTextField\cf3  : 
\f1\b \cf3 a reference
\f0\b0 \cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf7 NSSecureTextField\cf3 \
\

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 buttonSideInset\cf3  : \cf8 16\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 buttonYValue\cf3  : \cf8 13\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 accViewSideInset\cf3  : \cf8 22\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 accViewYValue\cf3  : \cf8 50\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 accViewTopGap\cf3  : \cf8 20\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 minimumButtonWidth\cf3  : \cf8 81\cf3 \
\
\cf2 -- used to return values from main-thread handlers\cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 returnCode\cf3  : 
\f2 \cf6 missing value
\f0 \cf3 \

\f1\b \cf3 property
\f0\b0 \cf3  \cf7 handlerResult\cf3  : 
\f2 \cf6 missing value
\f0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 display enhanced window
\f0\b0 \cf3  \cf7 windowTitle\cf3  \cf5 acc view width\cf3  \cf7 theWidth\cf3  \cf5 acc view height\cf3  \cf7 theHeight\cf3  \cf5 acc view controls\cf3  \cf7 controlsList\cf3  \cf5 giving up after\cf3  \cf7 giveUp\cf3  : \cf8 0\cf3  \cf5 active field\cf3  \cf7 defaultField\cf3  : 
\f2 \cf6 missing value
\f0 \cf3  \cf5 initial position\cf3  \cf7 initPosition\cf3  : \{\} \cf5 align cancel button\cf3  \cf7 cancelLeftFlag\cf3  : \cf9 true\cf3  \cf5 buttons\cf3  \cf7 allButtons\cf3 \
	\cf2 -- check we can interact\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theError\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf11 AEInteractWithUser\cf3 (\cf8 -1\cf3 , 
\f2 \cf6 missing value
\f0 \cf3 , 
\f2 \cf6 missing value
\f0 \cf3 ) \cf2 -- -1 is kAEDefaultTimeout\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 theError\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f1\b \cf3 not
\f0\b0 \cf3  \cf8 0\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 error
\f0\b0 \cf3  \cf3 "User interaction disallowed"\cf3  \cf5 number\cf3  \cf7 theError\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 prepareEnhancedWindowMainThread\cf3 :\{\cf7 windowTitle\cf3 , \cf7 theWidth\cf3 , \cf7 theHeight\cf3 , \cf7 controlsList\cf3 , \cf7 giveUp\cf3 , \cf7 defaultField\cf3 , \cf7 initPosition\cf3 , \cf7 cancelLeftFlag\cf3 , \cf7 allButtons\cf3 \}\
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theWindow\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 handlerResult\cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 showTheWindowAndWaitMainThread\cf3 :\{\cf7 theWindow\cf3 , \cf7 defaultField\cf3 , \cf7 giveUp\cf3 , \cf7 initPosition\cf3 , \cf7 windowTitle\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "prepareEnhancedWindowMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 windowTitle\cf3 , \cf7 theWidth\cf3 , \cf7 theHeight\cf3 , \cf7 controlsList\cf3 , \cf7 giveUp\cf3 , \cf7 defaultField\cf3 , \cf7 initPosition\cf3 , \cf7 cancelLeftFlag\cf3 , \cf7 allButtons\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theWindow\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 handlerResult\cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "showTheWindowAndWaitMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 theWindow\cf3 , \cf7 defaultField\cf3 , \cf7 giveUp\cf3 , \cf7 initPosition\cf3 , \cf7 windowTitle\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3 \
	\cf2 -- get values after window is closed\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonNumber\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 returnCode\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 buttonNumber\cf3  = \cf7 NSModalResponseCancel\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 error
\f0\b0 \cf3  \cf5 number\cf3  \cf8 -128\cf3  \cf2 -- designated Cancel button pressed\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 buttonNumber\cf3  = \cf7 NSModalResponseAbort\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  \cf2 -- timed out\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonName\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf3 "Gave Up"\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonName\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (
\f2 \cf6 item
\f0 \cf3  \cf7 buttonNumber\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 allButtons\cf3 )'s \cf11 title\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf2 -- get values from controls\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\}\
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 aControl\cf3  
\f1\b \cf3 in
\f0\b0 \cf3  \cf7 controlsList\cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSTextField\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 stringValue\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
			(\cf7 aControl's\cf3  \cf11 setDelegate\cf3 :(
\f2 \cf6 missing value
\f0 \cf3 ))\
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSPopUpButton\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 titleOfSelectedItem\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSButton\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 state\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSPathControl\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 |URL|\cf3 ()'s \cf11 |path|\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSMatrix\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 selectedCell\cf3 ()'s \cf11 title\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSImageView\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 image\cf3 ()'s \cf11 |name|\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  \cf2 -- NSBox \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 returnCode\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 buttonName\cf3 , \cf7 controlResults\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 display enhanced window
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create buttons
\f0\b0 \cf3  \cf7 buttonList\cf3  \cf5 button keys\cf3  \cf7 buttonKeysList\cf3  : \{\} \cf5 equal widths\cf3  \cf7 equalWidths\cf3  : (\cf9 false\cf3 ) \cf5 default button\cf3  \cf7 okIndex\cf3  : \cf8 0\cf3  \cf5 cancel button\cf3  \cf7 cancelIndex\cf3  : \cf8 0\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createButtonsViewMainThread\cf3 :\{\cf7 buttonList\cf3 , \cf7 buttonKeysList\cf3 , \cf7 equalWidths\cf3 , \cf7 cancelIndex\cf3 , \cf7 okIndex\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createButtonsViewMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 buttonList\cf3 , \cf7 buttonKeysList\cf3 , \cf7 equalWidths\cf3 , \cf7 cancelIndex\cf3 , \cf7 okIndex\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create buttons
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 display enhanced alert
\f0\b0 \cf3  \cf7 mainText\cf3  \cf5 message\cf3  \cf7 theExplanation\cf3  \cf5 as\cf3  \cf7 styleType\cf3  : \cf9 informational alert\cf3  \cf5 buttons\cf3  \cf7 buttonsList\cf3  \cf5 suppression\cf3  \cf7 showSuppression\cf3  : \cf9 false\cf3  \cf5 giving up after\cf3  \cf7 giveUp\cf3  : \cf8 0\cf3  \cf5 acc view width\cf3  \cf7 theWidth\cf3  \cf5 acc view height\cf3  \cf7 theHeight\cf3  \cf5 acc view controls\cf3  \cf7 controlsList\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 styleType\cf3  = \cf9 critical alert\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 styleNum\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 2\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 styleType\cf3  = \cf9 warning alert\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 styleNum\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 styleNum\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theError\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf9 current application's\cf3  \cf11 AEInteractWithUser\cf3 (\cf8 -1\cf3 , 
\f2 \cf6 missing value
\f0 \cf3 , 
\f2 \cf6 missing value
\f0 \cf3 ) \cf2 -- -1 is kAEDefaultTimeout\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 theError\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f1\b \cf3 not
\f0\b0 \cf3  \cf8 0\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 error
\f0\b0 \cf3  \cf3 "User interaction disallowed"\cf3  \cf5 number\cf3  \cf7 theError\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 displayEnhancedAlertMainThread\cf3 :\{\cf7 mainText\cf3 , \cf7 theExplanation\cf3 , \cf7 styleNum\cf3 , \cf7 buttonsList\cf3 , \cf7 showSuppression\cf3 , \cf7 giveUp\cf3 , \cf7 theWidth\cf3 , \cf7 theHeight\cf3 , \cf7 controlsList\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "displayEnhancedAlertMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 mainText\cf3 , \cf7 theExplanation\cf3 , \cf7 styleNum\cf3 , \cf7 buttonsList\cf3 , \cf7 showSuppression\cf3 , \cf7 giveUp\cf3 , \cf7 theWidth\cf3 , \cf7 theHeight\cf3 , \cf7 controlsList\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf2 --	if a giveUp time was specified and the alert didn't timeout, cancel the pending abort request\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 giveUp\cf3  > \cf8 0\cf3  
\f1\b \cf3 and
\f0\b0 \cf3  \cf7 returnCode\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f1\b \cf3 not
\f0\b0 \cf3  \cf7 NSModalResponseAbort\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  \cf7 NSObject's\cf3  \cf11 cancelPreviousPerformRequestsWithTarget\cf3 :(\cf7 NSApp\cf3 ) \cf11 selector\cf3 :\cf3 "abortModal"\cf3  \cf11 object\cf3 :(
\f2 \cf6 missing value
\f0 \cf3 )\
	\cf2 -- get values after alert is closed\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theAlert\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 handlerResult\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 suppressedState\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theAlert's\cf3  \cf11 suppressionButton\cf3 ()'s \cf11 state\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonNumber\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 returnCode\cf3  
\f1\b \cf3 mod
\f0\b0 \cf3  \cf8 1000\cf3  + \cf8 1\cf3  \cf2 -- where 1 = right-most button\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 buttonNumber\cf3  = \cf8 0\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonName\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf3 "Gave Up"\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonName\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 buttonNumber\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  (
\f2 \cf4 reverse
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonsList\cf3 )\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf2 -- get values from controls\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\}\
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 aControl\cf3  
\f1\b \cf3 in
\f0\b0 \cf3  \cf7 controlsList\cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSTextField\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 stringValue\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSPopUpButton\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 titleOfSelectedItem\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSButton\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 state\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSPathControl\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 |URL|\cf3 ()'s \cf11 |path|\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSMatrix\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 selectedCell\cf3 ()'s \cf11 title\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  (\cf7 aControl's\cf3  \cf11 isKindOfClass\cf3 :(\cf7 NSImageView\cf3 )) 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aControl's\cf3  \cf11 image\cf3 ()'s \cf11 |name|\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 text
\f0 \cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3  \cf2 -- NSBox \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 controlResults\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 returnCode\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 buttonName\cf3 , \cf7 suppressedState\cf3 , \cf7 controlResults\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 display enhanced alert
\f0\b0 \cf3 \
\
\cf2 -- alignment is left aligned, right aligned or center aligned; multiLine is a boolean, true for multi-line labels\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 labelString\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  \cf7 maxWidth\cf3  \cf5 aligns\cf3  \cf7 alignment\cf3  : \cf9 left aligned\cf3  \cf5 multiline\cf3  \cf7 wrapsBool\cf3  : \cf9 true\cf3  \cf5 control size\cf3  \cf7 controlSize\cf3  : \cf9 regular size\cf3  \cf5 bold type\cf3  \cf7 boldType\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createLabelMainThread\cf3 :\{\cf7 labelString\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 maxWidth\cf3 , \cf7 alignment\cf3 , \cf7 wrapsBool\cf3 , \cf7 controlSize\cf3 , \cf7 boldType\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createLabelMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 labelString\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 maxWidth\cf3 , \cf7 alignment\cf3 , \cf7 wrapsBool\cf3 , \cf7 controlSize\cf3 , \cf7 boldType\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 max width for labels
\f0\b0 \cf3  \cf7 listOfLabels\cf3  \cf5 control size\cf3  \cf7 controlSize\cf3  : \cf9 regular size\cf3  \cf5 bold type\cf3  \cf7 boldType\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFont\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 fontOfControlSize\cf3 :\cf7 controlSize\cf3  \cf11 boldType\cf3 :\cf7 boldType\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theAtts\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSDictionary's\cf3  \cf11 dictionaryWithObject\cf3 :\cf7 theFont\cf3  \cf11 forKey\cf3 :(\cf7 NSFontAttributeName\cf3 )\
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 maxWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 labelString\cf3  
\f1\b \cf3 in
\f0\b0 \cf3  \cf7 listOfLabels\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theString\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 NSString's\cf3  \cf11 stringWithString\cf3 :\cf7 labelString\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 newWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 width\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  (\cf7 theString's\cf3  \cf11 sizeWithAttributes\cf3 :\cf7 theAtts\cf3 )\
		
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 newWidth\cf3  > \cf7 maxWidth\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 maxWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 newWidth\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 maxWidth\cf3  + \cf8 4.5\cf3  \cf2 -- allow for frame rectangle and fudge\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 max width for labels
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 max depth for label
\f0\b0 \cf3  \cf7 labelText\cf3  \cf5 max width\cf3  \cf7 maxWidth\cf3  \cf5 control size\cf3  \cf7 controlSize\cf3  : \cf9 regular size\cf3  \cf5 bold type\cf3  \cf7 boldType\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFont\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 fontOfControlSize\cf3 :\cf7 controlSize\cf3  \cf11 boldType\cf3 :\cf7 boldType\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theAtts\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSDictionary's\cf3  \cf11 dictionaryWithObject\cf3 :\cf7 theFont\cf3  \cf11 forKey\cf3 :(\cf7 NSFontAttributeName\cf3 )\
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 labelText\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSString's\cf3  \cf11 stringWithString\cf3 :\cf7 labelText\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 labelText's\cf3  \cf11 boundingRectWithSize\cf3 :\{\cf7 maxWidth\cf3 , \cf8 2000\cf3 \} \cf11 options\cf3 :\cf7 NSStringDrawingUsesLineFragmentOrigin\cf3  \cf11 attributes\cf3 :\cf7 theAtts\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theHeight\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 height\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theHeight\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 theHeight\cf3  + \cf8 1\cf3  \cf2 -- allow  fudge\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 max depth for label
\f0\b0 \cf3 \
\
\cf2 -- extraHeight of 0 means it takes a single line, otherwise add as many points as you want\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create field
\f0\b0 \cf3  \cf7 enteredText\cf3  \cf5 placeholder text\cf3  \cf7 placeholder\cf3  : \cf3 ""\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 field width\cf3  \cf7 theWidth\cf3  \cf5 extra height\cf3  \cf7 extraHeight\cf3  : \cf8 0\cf3  \cf5 accepts linebreak and tab\cf3  \cf7 acceptsTabs\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createFieldMainThread\cf3 :\{\cf7 enteredText\cf3 , \cf7 placeholder\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 extraHeight\cf3 , \cf7 acceptsTabs\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createFieldMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 enteredText\cf3 , \cf7 placeholder\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 extraHeight\cf3 , \cf7 acceptsTabs\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create field
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create secure field
\f0\b0 \cf3  \cf7 enteredText\cf3  \cf5 placeholder text\cf3  \cf7 placeholder\cf3  : \cf3 ""\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 field width\cf3  \cf7 theWidth\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createSecureFieldMainThread\cf3 :\{\cf7 enteredText\cf3 , \cf7 placeholder\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createSecureFieldMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 enteredText\cf3 , \cf7 placeholder\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create secure field
\f0\b0 \cf3 \
\
\cf2 -- makes label and field together\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create top labeled field
\f0\b0 \cf3  \cf7 enteredText\cf3  \cf5 placeholder text\cf3  \cf7 placeholder\cf3  : \cf3 ""\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 field width\cf3  \cf7 theWidth\cf3  \cf5 extra height\cf3  \cf7 extraHeight\cf3  : \cf8 0\cf3  \cf5 label text\cf3  \cf7 theLabel\cf3  \cf5 accepts linebreak and tab\cf3  \cf7 acceptsTabs\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theField\cf3 , \cf7 theTop\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create field
\f0\b0 \cf3  \cf7 enteredText\cf3  \cf5 placeholder text\cf3  \cf7 placeholder\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 field width\cf3  \cf7 theWidth\cf3  \cf5 extra height\cf3  \cf7 extraHeight\cf3  \cf5 accepts linebreak and tab\cf3  \cf7 acceptsTabs\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theTop\cf3  + \cf8 8\cf3 ) \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 aligns\cf3  \cf9 left aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 theField\cf3 , \cf7 theLabel\cf3 , \cf7 theTop\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create top labeled field
\f0\b0 \cf3 \
\
\cf2 -- makes label and field; if fieldLeft is less than leftInset, the label will start at leftInset, with the field following;\cf3 \
\cf2 -- if fieldLeft is more than leftInset, the field will start at fieldLeft, and the label will will appear to its left\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create side labeled field
\f0\b0 \cf3  \cf7 enteredText\cf3  \cf5 placeholder text\cf3  \cf7 placeholder\cf3  : \cf3 ""\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 total width\cf3  \cf7 theWidth\cf3  \cf5 label text\cf3  \cf7 theLabel\cf3  \cf5 field left\cf3  \cf7 fieldLeft\cf3  \cf5 accepts linebreak and tab\cf3  \cf7 acceptsTabs\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 fieldLeft\cf3  \uc0\u8804  \cf7 theLeft\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 4\cf3 ) \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 aligns\cf3  \cf9 left aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 fieldLeft\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 theLeft\cf3  + \cf7 newWidth\cf3  + \cf8 8\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theField\cf3 , \cf7 theTop\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create field
\f0\b0 \cf3  \cf7 enteredText\cf3  \cf5 placeholder text\cf3  \cf7 placeholder\cf3  \cf5 left inset\cf3  \cf7 fieldLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 field width\cf3  (\cf7 theWidth\cf3  - \cf7 newWidth\cf3  - \cf8 8\cf3 ) \cf5 extra height\cf3  \cf8 0\cf3  \cf5 accepts linebreak and tab\cf3  \cf7 acceptsTabs\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 4\cf3 ) \cf5 max width\cf3  (\cf7 fieldLeft\cf3  - \cf7 theLeft\cf3  - \cf8 8\cf3 ) \cf5 aligns\cf3  \cf9 right aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theField\cf3 , \cf7 theTop\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create field
\f0\b0 \cf3  \cf7 enteredText\cf3  \cf5 placeholder text\cf3  \cf7 placeholder\cf3  \cf5 left inset\cf3  \cf7 fieldLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 field width\cf3  (\cf7 theWidth\cf3  - \cf7 fieldLeft\cf3 ) \cf5 extra height\cf3  \cf8 0\cf3  \cf5 accepts linebreak and tab\cf3  \cf7 acceptsTabs\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf2 -- return theField, theLabel, the top of the field, and left of the field\cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 theField\cf3 , \cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 fieldLeft\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create side labeled field
\f0\b0 \cf3 \
\
\cf2 -- entryList is a list of names for the menu items\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create popup
\f0\b0 \cf3  \cf7 entryList\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 popup width\cf3  \cf7 theWidth\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3  : \cf8 1\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 defaultValue\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 integer
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 defaultValue\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 defaultValue\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 entryList\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createPopupMainThread\cf3 :\{\cf7 entryList\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 defaultValue\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createPopupMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 entryList\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 defaultValue\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create popup
\f0\b0 \cf3 \
\
\cf2 -- makes label and popup; if popupLeft is less than leftInset, the label will start at leftInset, with the popup following;\cf3 \
\cf2 -- if popupLeft is more than leftInset, the popup will start at popupLeft, and the label will will appear to its left\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create labeled popup
\f0\b0 \cf3  \cf7 entryList\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 popup width\cf3  \cf7 popupWidth\cf3  \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 label text\cf3  \cf7 theLabel\cf3  \cf5 popup left\cf3  \cf7 popupLeft\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3  : \cf8 1\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 popupLeft\cf3  \uc0\u8804  \cf7 theLeft\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 6\cf3 ) \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 aligns\cf3  \cf9 left aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 popupLeft\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 newWidth\cf3  + \cf8 6\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 thePopup\cf3 , \cf7 theTop\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create popup
\f0\b0 \cf3  \cf7 entryList\cf3  \cf5 left inset\cf3  \cf7 popupLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 popup width\cf3  \cf7 popupWidth\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 6\cf3 ) \cf5 max width\cf3  (\cf7 popupLeft\cf3  - \cf7 theLeft\cf3  - \cf8 6\cf3 ) \cf5 aligns\cf3  \cf9 right aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 thePopup\cf3 , \cf7 theTop\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create popup
\f0\b0 \cf3  \cf7 entryList\cf3  \cf5 left inset\cf3  \cf7 popupLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 popup width\cf3  \cf7 popupWidth\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 thePopup\cf3 , \cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 popupLeft\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create labeled popup
\f0\b0 \cf3 \
\
\
\cf2 -- initialState is boolean for initial state\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create checkbox
\f0\b0 \cf3  \cf7 checkTitle\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 initial state\cf3  \cf7 initialState\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createCheckboxMainThread\cf3 :\{\cf7 checkTitle\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 initialState\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createCheckboxMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 checkTitle\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 initialState\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create checkbox
\f0\b0 \cf3 \
\
\cf2 -- makes label and checkbox; if checkboxLeft is less than leftInset, the label will start at leftInset, with the checkbox following;\cf3 \
\cf2 -- if checkboxLeft is more than leftInset, the checkbox will start at checkboxLeft, and the label will will appear to its left\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create labeled checkbox
\f0\b0 \cf3  \cf7 checkTitle\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 label text\cf3  \cf7 theLabel\cf3  \cf5 checkbox left\cf3  \cf7 checkboxLeft\cf3  \cf5 initial state\cf3  \cf7 checkState\cf3  : \cf9 false\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 checkboxLeft\cf3  \uc0\u8804  \cf7 theLeft\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 2\cf3 ) \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 aligns\cf3  \cf9 left aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 checkboxLeft\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 newWidth\cf3  + \cf8 6\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theCheckbox\cf3 , \cf7 theTop\cf3 , \cf7 theWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create checkbox
\f0\b0 \cf3  \cf7 checkTitle\cf3  \cf5 left inset\cf3  \cf7 checkboxLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  (\cf7 theWidth\cf3  - \cf7 newWidth\cf3  - \cf8 6\cf3 ) \cf5 initial state\cf3  \cf7 checkState\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 2\cf3 ) \cf5 max width\cf3  (\cf7 checkboxLeft\cf3  - \cf7 theLeft\cf3  - \cf8 6\cf3 ) \cf5 aligns\cf3  \cf9 right aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theCheckbox\cf3 , \cf7 theTop\cf3 , \cf7 theWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create checkbox
\f0\b0 \cf3  \cf7 checkTitle\cf3  \cf5 left inset\cf3  \cf7 checkboxLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  (\cf7 theWidth\cf3  - \cf7 checkboxLeft\cf3 ) \cf5 initial state\cf3  \cf7 checkState\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 theCheckbox\cf3 , \cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 checkboxLeft\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create labeled checkbox
\f0\b0 \cf3 \
\
\cf2 -- popsUp is true for a popup path control, false for a standard path control\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create path control
\f0\b0 \cf3  \cf7 thePath\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 control width\cf3  \cf7 theWidth\cf3  \cf5 pops up\cf3  \cf7 popsUpBool\cf3  : \cf9 true\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createPathControlMainThread\cf3 :\{\cf7 thePath\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 popsUpBool\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createPathControlMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 thePath\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 popsUpBool\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create path control
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create labeled path control
\f0\b0 \cf3  \cf7 thePath\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 control width\cf3  \cf7 theWidth\cf3  \cf5 pops up\cf3  \cf7 popsUpBool\cf3  : \cf9 true\cf3  \cf5 label text\cf3  \cf7 theLabel\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 thePathControl\cf3 , \cf7 theTop\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create path control
\f0\b0 \cf3  \cf7 thePath\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 control width\cf3  \cf7 theWidth\cf3  \cf5 pops up\cf3  \cf7 popsUpBool\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theTop\cf3  + \cf8 4\cf3 ) \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 aligns\cf3  \cf9 left aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 thePathControl\cf3 , \cf7 theLabel\cf3 , \cf7 theTop\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create labeled path control
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create matrix
\f0\b0 \cf3  \cf7 listOfNames\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 arranged vertically\cf3  \cf7 isVertical\cf3  : \cf9 true\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3  : \cf8 1\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createMatrixMainThread\cf3 :\{\cf7 listOfNames\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 isVertical\cf3 , \cf7 defaultValue\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createMatrixMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 listOfNames\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 isVertical\cf3 , \cf7 defaultValue\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create matrix
\f0\b0 \cf3 \
\
\cf2 -- makes label and matrix; if matrixLeft is less than leftInset, the label will start at leftInset, with the matrix following;\cf3 \
\cf2 -- if matrixLeft is more than leftInset, the matrix will start at matrixLeft, and the label will will appear to its left\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create labeled matrix
\f0\b0 \cf3  \cf7 listOfNames\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 arranged vertically\cf3  \cf7 isVertical\cf3  : \cf9 true\cf3  \cf5 matrix left\cf3  \cf7 matrixLeft\cf3  \cf5 label text\cf3  \cf7 theLabel\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3  : \cf8 1\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 matrixLeft\cf3  \uc0\u8804  \cf7 theLeft\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 2\cf3 ) \cf5 max width\cf3  \cf7 theWidth\cf3  \cf5 aligns\cf3  \cf9 left aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 matrixLeft\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 newWidth\cf3  + \cf8 6\cf3  + \cf7 theLeft\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theMatrix\cf3 , \cf7 theTop\cf3 , \cf7 theWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create matrix
\f0\b0 \cf3  \cf7 listOfNames\cf3  \cf5 left inset\cf3  \cf7 matrixLeft\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  (\cf7 theWidth\cf3  - \cf7 newWidth\cf3  - \cf8 6\cf3 ) \cf5 arranged vertically\cf3  \cf7 isVertical\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 newWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create label
\f0\b0 \cf3  \cf7 theLabel\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  \cf5 bottom\cf3  (\cf7 theBottom\cf3  + \cf8 2\cf3 ) \cf5 max width\cf3  (\cf7 matrixLeft\cf3  - \cf7 theLeft\cf3  - \cf8 6\cf3 ) \cf5 aligns\cf3  \cf9 right aligned\cf3  
\f1\b \cf3 without
\f0\b0 \cf3  \cf5 multiline\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theMatrix\cf3 , \cf7 theTop\cf3 , \cf7 theWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 create matrix
\f0\b0 \cf3  \cf7 listOfNames\cf3  \cf5 left inset\cf3  (\cf7 matrixLeft\cf3 ) \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 max width\cf3  (\cf7 theWidth\cf3  - \cf7 matrixLeft\cf3 ) \cf5 arranged vertically\cf3  \cf7 isVertical\cf3  \cf5 initial choice\cf3  \cf7 defaultValue\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf7 theLabel's\cf3  \cf11 setFrame\cf3 :(\cf9 current application's\cf3  \cf11 NSOffsetRect\cf3 (\cf7 theLabel's\cf3  \cf11 frame\cf3 (), \cf8 0\cf3 , \cf7 theTop\cf3  - \cf7 theBottom\cf3  - \cf8 19\cf3 ))\
	
\f1\b \cf3 return
\f0\b0 \cf3  \{\cf7 theMatrix\cf3 , \cf7 theLabel\cf3 , \cf7 theTop\cf3 , \cf7 matrixLeft\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create labeled matrix
\f0\b0 \cf3 \
\
\cf2 -- makes horizontal rule\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create rule
\f0\b0 \cf3  \cf7 theBottom\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 rule width\cf3  \cf7 theWidth\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createRuleMainThread\cf3 :\{\cf7 theBottom\cf3 , \cf7 theLeft\cf3 , \cf7 theWidth\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createRuleMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 theBottom\cf3 , \cf7 theLeft\cf3 , \cf7 theWidth\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create rule
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  
\f1\b \cf10 create image view
\f0\b0 \cf3  \cf7 posixPath\cf3  \cf5 left inset\cf3  \cf7 theLeft\cf3  : \cf8 0\cf3  \cf5 bottom\cf3  \cf7 theBottom\cf3  \cf5 view width\cf3  \cf7 viewWidth\cf3  \cf5 view height\cf3  \cf7 viewHeight\cf3  \cf5 scale image\cf3  \cf7 imageScale\cf3  : \cf9 scale down proportionally\cf3  \cf5 align image\cf3  \cf7 imageAlignment\cf3  : \cf9 center aligned\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 createImageViewMainThread\cf3 :\{\cf7 posixPath\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 viewWidth\cf3 , \cf7 viewHeight\cf3 , \cf7 imageScale\cf3 , \cf7 imageAlignment\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 performSelectorOnMainThread\cf3 :\cf3 "createImageViewMainThread:"\cf3  \cf11 withObject\cf3 :\{\cf7 posixPath\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 viewWidth\cf3 , \cf7 viewHeight\cf3 , \cf7 imageScale\cf3 , \cf7 imageAlignment\cf3 \} \cf11 waitUntilDone\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 handlerResult\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf10 create image view
\f0\b0 \cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 fontOfControlSize\cf3 :\cf7 controlSize\cf3  \cf11 boldType\cf3 :\cf7 boldType\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 controlSize\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  \cf9 regular size\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFontSize\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSFont's\cf3  \cf11 systemFontSizeForControlSize\cf3 :\cf7 NSRegularControlSize\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 controlSize\cf3  = \cf9 mini size\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFontSize\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSFont's\cf3  \cf11 systemFontSizeForControlSize\cf3 :\cf7 NSMiniControlSize\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 controlSize\cf3  = \cf9 small size\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFontSize\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSFont's\cf3  \cf11 systemFontSizeForControlSize\cf3 :\cf7 NSSmallControlSize\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 controlSize\cf3  = \cf9 large size\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFontSize\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 16\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 boldType\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 NSFont's\cf3  \cf11 boldSystemFontOfSize\cf3 :\cf7 theFontSize\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 return
\f0\b0 \cf3  \cf7 NSFont's\cf3  \cf11 systemFontOfSize\cf3 :\cf7 theFontSize\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 fontOfControlSize\cf11 :\cf11 boldType\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 displayEnhancedAlertMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 mainText\cf3 , \cf7 theExplanation\cf3 , \cf7 styleNum\cf3 , \cf7 buttonsList\cf3 , \cf7 showSuppression\cf3 , \cf7 giveUp\cf3 , \cf7 theWidth\cf3 , \cf7 theHeight\cf3 , \cf7 controlsList\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theAccessoryView\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSView's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf8 0\cf3 , \cf8 0\cf3 \}, \{\cf7 theWidth\cf3 , \cf7 theHeight\cf3 \}\}\
	\cf7 theAccessoryView's\cf3  \cf11 setSubviews\cf3 :\cf7 controlsList\cf3 \
	\cf2 -- reverse buttons because they get added in reverse order cf AS\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonsList\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf4 reverse
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonsList\cf3 \
	\cf2 -- create an alert\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theAlert\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSAlert's\cf3  \cf11 alloc\cf3 ()'s \cf11 init\cf3 ()\
	\cf2 -- set up alert\cf3 \
	
\f1\b \cf3 tell
\f0\b0 \cf3  \cf7 theAlert\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setAlertStyle\cf3 :\cf7 styleNum\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setMessageText\cf3 :\cf7 mainText\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setInformativeText\cf3 :\cf7 theExplanation\cf3 \
		
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 anEntry\cf3  
\f1\b \cf3 in
\f0\b0 \cf3  \cf7 buttonsList\cf3 \
			(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 addButtonWithTitle\cf3 :\cf7 anEntry\cf3 )\
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setShowsSuppressionButton\cf3 :\cf7 showSuppression\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setAccessoryView\cf3 :\cf7 theAccessoryView\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  (\cf11 |window|\cf3 ()'s \cf11 setAutorecalculatesKeyViewLoop\cf3 :\cf9 true\cf3 )\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 tell
\f0\b0 \cf3 \
	\cf2 -- if giveUp value > 0, tell the app to abort any modal event loop after that time, and thus close the panel\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 giveUp\cf3  > \cf8 0\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  \cf7 NSApp's\cf3  \cf11 performSelector\cf3 :\cf3 "abortModal"\cf3  \cf11 withObject\cf3 :(
\f2 \cf6 missing value
\f0 \cf3 ) \cf11 afterDelay\cf3 :\cf7 giveUp\cf3  \cf11 inModes\cf3 :\{\cf7 NSModalPanelRunLoopMode\cf3 \}\
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 returnCode\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theAlert's\cf3  \cf11 runModal\cf3 ()\
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theAlert\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 displayEnhancedAlertMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 prepareEnhancedWindowMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 windowTitle\cf3 , \cf7 theWidth\cf3 , \cf7 theHeight\cf3 , \cf7 controlsList\cf3 , \cf7 giveUp\cf3 , \cf7 defaultField\cf3 , \cf7 initPosition\cf3 , \cf7 cancelLeftFlag\cf3 , \cf7 allButtons\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 windowWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theWidth\cf3  + \cf7 accViewSideInset\cf3  * \cf8 2\cf3 \
	\cf2 -- position buttons\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonLeft\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 windowWidth\cf3  - \cf7 buttonSideInset\cf3 \
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 aButton\cf3  
\f1\b \cf3 in
\f0\b0 \cf3  (
\f2 \cf4 reverse
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 allButtons\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 aButton's\cf3  \cf11 frame\cf3 ()\
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 width\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonLeft\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 buttonLeft\cf3  - \cf7 buttonWidth\cf3 \
		(\cf7 aButton's\cf3  \cf11 setFrameOrigin\cf3 :\{\cf7 buttonLeft\cf3 , \cf7 buttonYValue\cf3 \})\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	\cf2 -- reposition first button if necessary\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 cancelLeftFlag\cf3  
\f1\b \cf3 and
\f0\b0 \cf3  (
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 allButtons\cf3 )'s \cf11 tag\cf3 () 
\f1\b \cf3 is
\f0\b0 \cf3  \cf7 NSModalResponseCancel\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  (
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 allButtons\cf3 )'s \cf11 setFrameOrigin\cf3 :\{\cf7 buttonSideInset\cf3 , \cf7 buttonYValue\cf3 \}\
	\cf2 -- set up window and add buttons\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theWindow\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSWindow's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithContentRect\cf3 :\{\{\cf8 0\cf3 , \cf8 0\cf3 \}, \{\cf7 windowWidth\cf3 , \cf7 theHeight\cf3  + \cf7 accViewYValue\cf3  + \cf7 accViewTopGap\cf3 \}\} \cf11 styleMask\cf3 :\cf7 NSTitledWindowMask\cf3  \cf11 backing\cf3 :\cf7 NSBackingStoreBuffered\cf3  \cf11 defer\cf3 :\cf9 true\cf3 \
	\cf7 theWindow's\cf3  \cf11 setLevel\cf3 :\cf7 NSModalPanelWindowLevel\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thisContentView\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theWindow's\cf3  \cf11 contentView\cf3 ()\
	\cf7 thisContentView's\cf3  \cf11 setSubviews\cf3 :\cf7 allButtons\cf3 \
	\cf2 -- set up accessory view, add controls, and add to window\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theAccessoryView\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSView's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 accViewSideInset\cf3 , \cf7 accViewYValue\cf3 \}, \{\cf7 theWidth\cf3 , \cf7 theHeight\cf3 \}\}\
	\cf7 theAccessoryView's\cf3  \cf11 setSubviews\cf3 :\cf7 controlsList\cf3 \
	\cf7 thisContentView's\cf3  \cf11 addSubview\cf3 :\cf7 theAccessoryView\cf3 \
	\cf7 theWindow's\cf3  \cf11 setAutorecalculatesKeyViewLoop\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theWindow\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 prepareEnhancedWindowMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 showTheWindowAndWaitMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theWindow\cf3 , \cf7 defaultField\cf3 , \cf7 giveUp\cf3 , \cf7 initPosition\cf3 , \cf7 windowTitle\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	\cf2 -- set first responder if necessary, then show window\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 defaultField\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f1\b \cf3 not
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3  \cf7 theWindow's\cf3  \cf11 makeFirstResponder\cf3 :\cf7 defaultField\cf3 \
	\cf2 -- position window if necessary\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 initPosition\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 initPosition\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 initPosition\cf3  = \{\} 
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf7 theWindow's\cf3  \cf11 |center|\cf3 ()\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 screenFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSScreen's\cf3  \cf11 mainScreen\cf3 ()'s \cf11 frame\cf3 ()\
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 screenFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 width\cf3 :\cf7 screenWidth\cf3 , \cf7 height\cf3 :\cf7 screenHeight\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 screenFrame\cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 screenWidth\cf3 , \cf7 screenHeight\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 screenFrame\cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theY\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 screenHeight\cf3  - (
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 initPosition\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 windowFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theWindow's\cf3  \cf11 frame\cf3 ()\
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 windowFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 origin\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 windowFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 initPosition\cf3 , \cf7 theY\cf3  - (\cf7 height\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 windowFrame\cf3 )\}\
		
\f1\b \cf3 else
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 windowFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 initPosition\cf3 , \cf7 theY\cf3  - (
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 windowFrame\cf3 )\}\
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		\cf7 theWindow's\cf3  \cf11 setFrame\cf3 :\cf7 windowFrame\cf3  \cf11 display\cf3 :\cf9 true\cf3 \
		\cf7 theWindow's\cf3  \cf11 orderFront\cf3 :
\f1\b \cf3 me
\f0\b0 \cf3  \cf2 -- must be visible or it will be centered\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf7 theWindow's\cf3  \cf11 setTitle\cf3 :\cf7 windowTitle\cf3 \
	\cf2 -- set give up timer if required, then show window modal\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 giveUp\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 integer
\f0 \cf3  > \cf8 0\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf7 NSApp's\cf3  \cf11 performSelector\cf3 :\cf3 "abortModal"\cf3  \cf11 withObject\cf3 :(
\f2 \cf6 missing value
\f0 \cf3 ) \cf11 afterDelay\cf3 :\cf7 giveUp\cf3  \cf11 inModes\cf3 :\{\cf7 NSModalPanelRunLoopMode\cf3 \}\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 returnCode\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSApp's\cf3  \cf11 runModalForWindow\cf3 :\cf7 theWindow\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 giveUp\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 integer
\f0 \cf3  > \cf8 0\cf3  
\f1\b \cf3 and
\f0\b0 \cf3  \cf7 returnCode\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f1\b \cf3 not
\f0\b0 \cf3  \cf7 NSModalResponseAbort\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf7 NSObject's\cf3  \cf11 cancelPreviousPerformRequestsWithTarget\cf3 :(\cf7 NSApp\cf3 ) \cf11 selector\cf3 :\cf3 "abortModal"\cf3  \cf11 object\cf3 :(
\f2 \cf6 missing value
\f0 \cf3 )\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf2 -- close window\cf3 \
	\cf7 theWindow's\cf3  \cf11 orderOut\cf3 :
\f1\b \cf3 me
\f0\b0 \cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 showTheWindowAndWaitMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createLabelMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 labelString\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 maxWidth\cf3 , \cf7 alignment\cf3 , \cf7 wrapsBool\cf3 , \cf7 controlSize\cf3 , \cf7 boldType\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	\cf2 -- create label, set size and make font\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theLabel\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 NSTextField's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 maxWidth\cf3 , \cf8 17\cf3 \}\})\
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFont\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 fontOfControlSize\cf3 :\cf7 controlSize\cf3  \cf11 boldType\cf3 :\cf7 boldType\cf3 \
	\cf2 -- format label\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 alignment\cf3  = \cf9 right aligned\cf3  
\f1\b \cf3 or
\f0\b0 \cf3  \cf7 alignment\cf3  
\f1\b \cf3 begins with
\f0\b0 \cf3  \cf3 "r"\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf7 theLabel's\cf3  \cf11 setAlignment\cf3 :\cf7 NSRightTextAlignment\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 alignment\cf3  = \cf9 center aligned\cf3  
\f1\b \cf3 or
\f0\b0 \cf3  \cf7 alignment\cf3  
\f1\b \cf3 begins with
\f0\b0 \cf3  \cf3 "c"\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf7 theLabel's\cf3  \cf11 setAlignment\cf3 :\cf7 NSCenterTextAlignment\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		\cf7 theLabel's\cf3  \cf11 setAlignment\cf3 :\cf7 NSLeftTextAlignment\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 tell
\f0\b0 \cf3  \cf7 theLabel\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setFont\cf3 :\cf7 theFont\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setPreferredMaxLayoutWidth\cf3 :\cf7 maxWidth\cf3 \
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setStringValue\cf3 :\cf7 labelString\cf3 )\
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setEditable\cf3 :\cf9 false\cf3 )\
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setSelectable\cf3 :\cf9 true\cf3 )\
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setBordered\cf3 :\cf9 false\cf3 )\
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setDrawsBackground\cf3 :\cf9 false\cf3 )\
		
\f1\b \cf3 its
\f0\b0 \cf3  (\cf11 cell\cf3 ()'s \cf11 setWraps\cf3 :\cf7 wrapsBool\cf3 )\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 tell
\f0\b0 \cf3 \
	\cf2 -- size label\cf3 \
	\cf7 theLabel's\cf3  \cf11 setFrameSize\cf3 :(\cf7 theLabel's\cf3  \cf11 fittingSize\cf3 ())\
	\cf2 -- set alignment\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theLabel's\cf3  \cf11 frame\cf3 ()\
	
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 width\cf3 :\cf7 newWidth\cf3 , \cf7 height\cf3 :\cf7 theHeight\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theFrame's\cf3  \cf7 |size|\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 newWidth\cf3 , \cf7 theHeight\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 alignment\cf3  = \cf9 right aligned\cf3  
\f1\b \cf3 or
\f0\b0 \cf3  \cf7 alignment\cf3  
\f1\b \cf3 begins with
\f0\b0 \cf3  \cf3 "r"\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theOrigin\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theLeft\cf3  + \cf7 maxWidth\cf3  - \cf7 newWidth\cf3 , \cf7 theBottom\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 alignment\cf3  = \cf9 center aligned\cf3  
\f1\b \cf3 or
\f0\b0 \cf3  \cf7 alignment\cf3  
\f1\b \cf3 begins with
\f0\b0 \cf3  \cf3 "c"\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theOrigin\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{(\cf7 theLeft\cf3  + (\cf7 maxWidth\cf3  - \cf7 newWidth\cf3 ) / \cf8 2\cf3 ), \cf7 theBottom\cf3 \}\
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theOrigin\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf7 theLabel's\cf3  \cf11 setFrameOrigin\cf3 :\cf7 theOrigin\cf3 \
	\cf2 -- return theLabel, the top of the label, and its width\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theLabel\cf3 , \cf7 theBottom\cf3  + \cf7 theHeight\cf3 , \cf7 newWidth\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createLabelMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createFieldMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 enteredText\cf3 , \cf7 placeholder\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 extraHeight\cf3 , \cf7 acceptsTabs\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theTop\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theBottom\cf3  + \cf8 22\cf3  + \cf7 extraHeight\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theField\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 NSTextField's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf7 theTop\cf3  - \cf7 theBottom\cf3 \}\})\
	
\f1\b \cf3 tell
\f0\b0 \cf3  \cf7 theField\cf3 \
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setEditable\cf3 :\cf9 true\cf3 )\
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setBezeled\cf3 :\cf9 true\cf3 )\
		
\f1\b \cf3 its
\f0\b0 \cf3  (\cf11 cell\cf3 ()'s \cf11 setPlaceholderString\cf3 :\cf7 placeholder\cf3 )\
		
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 extraHeight\cf3  > \cf8 0\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 its
\f0\b0 \cf3  (\cf11 cell\cf3 ()'s \cf11 setWraps\cf3 :\cf9 true\cf3 )\
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setStringValue\cf3 :\cf7 enteredText\cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 acceptsTabs\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setDelegate\cf3 :
\f1\b \cf3 me
\f0\b0 \cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 tell
\f0\b0 \cf3 \
	\cf2 -- return theField, the top of the field\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theField\cf3 , \cf7 theTop\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createFieldMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createSecureFieldMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 enteredText\cf3 , \cf7 placeholder\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theTop\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theBottom\cf3  + \cf8 22\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theField\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 NSSecureTextField's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf7 theTop\cf3  - \cf7 theBottom\cf3 \}\})\
	
\f1\b \cf3 tell
\f0\b0 \cf3  \cf7 theField\cf3 \
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setEditable\cf3 :\cf9 true\cf3 )\
		(
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setBezeled\cf3 :\cf9 true\cf3 )\
		
\f1\b \cf3 its
\f0\b0 \cf3  (\cf11 cell\cf3 ()'s \cf11 setWraps\cf3 :\cf9 false\cf3 )\
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setPlaceholderString\cf3 :\cf7 placeholder\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setStringValue\cf3 :\cf7 enteredText\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 tell
\f0\b0 \cf3 \
	\cf2 -- return theField, the top of the field\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theField\cf3 , \cf7 theTop\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createSecureFieldMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createPopupMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 entryList\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 defaultValue\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thePopup\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSPopUpButton's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf8 26\cf3 \}\} \cf11 pullsDown\cf3 :\cf9 false\cf3 \
	\cf7 thePopup's\cf3  \cf11 addItemsWithTitles\cf3 :\cf7 entryList\cf3 \
	\cf7 thePopup's\cf3  \cf11 selectItemWithTitle\cf3 :\cf7 defaultValue\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 thePopup\cf3 , \cf7 theBottom\cf3  + \cf8 26\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createPopupMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createCheckboxMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 checkTitle\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 initialState\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theCheckbox\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSButton's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf8 18\cf3 \}\}\
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFont\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 fontOfControlSize\cf3 :\cf9 regular size\cf3  \cf11 boldType\cf3 :\cf9 false\cf3 \
	
\f1\b \cf3 tell
\f0\b0 \cf3  \cf7 theCheckbox\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setButtonType\cf3 :\cf7 NSSwitchButton\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setTitle\cf3 :\cf7 checkTitle\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setState\cf3 :\cf7 initialState\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setFont\cf3 :\cf7 theFont\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 tell
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 isMain\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3 \
	\cf7 theCheckbox's\cf3  \cf11 setFrameSize\cf3 :(\cf7 theCheckbox's\cf3  \cf11 fittingSize\cf3 ())\
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theCheckbox's\cf3  \cf11 frame\cf3 ()\
	
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 width\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf2 -- return theCheckbox, the top of theCheckbox, and its width\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theCheckbox\cf3 , \cf7 theBottom\cf3  + \cf8 18\cf3 , \cf7 theWidth\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createCheckboxMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createPathControlMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 thePath\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 popsUpBool\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 anNSURL\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 |NSURL|'s\cf3  \cf11 fileURLWithPath\cf3 :\cf7 thePath\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 popsUpBool\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thePathControl\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSPathControl's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf8 26\cf3 \}\}\
		\cf7 thePathControl's\cf3  \cf11 setPathStyle\cf3 :\cf7 NSPathStylePopUp\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theTop\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theBottom\cf3  + \cf8 26\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thePathControl\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSPathControl's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf8 22\cf3 \}\}\
		\cf7 thePathControl's\cf3  \cf11 setPathStyle\cf3 :\cf7 NSPathStyleStandard\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theTop\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theBottom\cf3  + \cf8 22\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf7 thePathControl's\cf3  \cf11 setURL\cf3 :\cf7 anNSURL\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 thePathControl\cf3 , \cf7 theTop\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createPathControlMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createMatrixMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 listOfNames\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 theWidth\cf3 , \cf7 isVertical\cf3 , \cf7 defaultValue\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 defaultValue\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 integer
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 defaultValue\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 defaultValue\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 listOfNames\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 count
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 listOfNames\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 isVertical\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 rowCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theCount\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 colCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 colCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theCount\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 rowCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theDepth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 rowCount\cf3  * \cf8 18\cf3  + (\cf7 rowCount\cf3  - \cf8 1\cf3 ) * \cf8 2\cf3  \cf2 -- 18 pts per button + 2 pts between\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theMatrix\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSMatrix's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf7 theDepth\cf3 \}\} \cf11 mode\cf3 :\cf7 NSRadioModeMatrix\cf3  \cf11 cellClass\cf3 :(\cf7 NSButtonCell\cf3 ) \cf11 numberOfRows\cf3 :\cf7 rowCount\cf3  \cf11 numberOfColumns\cf3 :\cf7 colCount\cf3 \
	\cf7 theMatrix's\cf3  \cf11 deselectAllCells\cf3 ()\
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFont\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf11 fontOfControlSize\cf3 :\cf9 regular size\cf3  \cf11 boldType\cf3 :\cf9 false\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theCells\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theMatrix's\cf3  \cf11 cells\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 i\cf3  
\f1\b \cf3 from
\f0\b0 \cf3  \cf8 1\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 count
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theCells\cf3 \
		((
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theCells\cf3 )'s \cf11 setButtonType\cf3 :\cf7 NSRadioButton\cf3 )\
		((
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theCells\cf3 )'s \cf11 setTitle\cf3 :(
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 listOfNames\cf3 ))\
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 listOfNames\cf3  = \cf7 defaultValue\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 isVertical\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
				(\cf7 theMatrix's\cf3  \cf11 selectCellAtRow\cf3 :(\cf7 i\cf3  - \cf8 1\cf3 ) \cf11 column\cf3 :\cf8 0\cf3 )\
			
\f1\b \cf3 else
\f0\b0 \cf3 \
				(\cf7 theMatrix's\cf3  \cf11 selectCellAtRow\cf3 :\cf8 0\cf3  \cf11 column\cf3 :(\cf7 i\cf3  - \cf8 1\cf3 ))\
			
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		((
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theCells\cf3 )'s \cf11 setFont\cf3 :\cf7 theFont\cf3 )\
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	\cf7 theMatrix's\cf3  \cf11 setIntercellSpacing\cf3 :\{\cf8 8\cf3 , \cf8 2\cf3 \}\
	\cf7 theMatrix's\cf3  \cf11 setAutorecalculatesCellSize\cf3 :\cf9 true\cf3 \
	\cf7 theMatrix's\cf3  \cf11 setAutosizesCells\cf3 :\cf9 true\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 isMain\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSThread's\cf3  \cf11 isMainThread\cf3 () 
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 boolean
\f0 \cf3 \
	\cf7 theMatrix's\cf3  \cf11 sizeToCells\cf3 ()\
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theMatrix's\cf3  \cf11 frame\cf3 ()\
	
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 newWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 width\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 newWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	\cf7 theMatrix's\cf3  \cf11 setFrameSize\cf3 :\{\cf7 newWidth\cf3 , \cf7 theDepth\cf3 \}\
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theMatrix\cf3 , \cf7 theBottom\cf3  + \cf7 theDepth\cf3 , \cf7 newWidth\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createMatrixMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createRuleMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 theBottom\cf3 , \cf7 theLeft\cf3 , \cf7 theWidth\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theRule\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSBox's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 theWidth\cf3 , \cf8 1\cf3 \}\}\
	
\f1\b \cf3 tell
\f0\b0 \cf3  \cf7 theRule\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setBoxType\cf3 :\cf7 NSBoxSeparator\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setTitlePosition\cf3 :\cf7 NSNoTitle\cf3 \
		
\f1\b \cf3 its
\f0\b0 \cf3  \cf11 setBorderType\cf3 :\cf7 NSLineBorder\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 tell
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 theRule\cf3 , \cf7 theBottom\cf3  + \cf8 1\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createRuleMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createImageViewMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 posixPath\cf3 , \cf7 theLeft\cf3 , \cf7 theBottom\cf3 , \cf7 viewWidth\cf3 , \cf7 viewHeight\cf3 , \cf7 imageScale\cf3 , \cf7 imageAlignment\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theImage\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSImage's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithContentsOfFile\cf3 :\cf7 posixPath\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 theImage\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 missing value
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 error
\f0\b0 \cf3  \cf3 "No valid image found at "\cf3  & \cf7 posixPath\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 imageView\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 NSImageView's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf7 theLeft\cf3 , \cf7 theBottom\cf3 \}, \{\cf7 viewWidth\cf3 , \cf7 viewHeight\cf3 \}\}\
	\cf7 imageView's\cf3  \cf11 setImage\cf3 :\cf7 theImage\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theAlignments\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf9 center aligned\cf3 , \cf9 top aligned\cf3 , \cf9 top left aligned\cf3 , \cf9 top right aligned\cf3 , \cf9 left aligned\cf3 , \cf9 bottom left aligned\cf3 , \cf9 bottom right aligned\cf3 , \cf9 right aligned\cf3 , \cf9 bottom aligned\cf3 \}\
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 i\cf3  
\f1\b \cf3 from
\f0\b0 \cf3  \cf8 1\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 count
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theAlignments\cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theAlignments\cf3  = \cf7 imageAlignment\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			(\cf7 imageView's\cf3  \cf11 setImageAlignment\cf3 :(\cf7 i\cf3  - \cf8 1\cf3 ))\
			
\f1\b \cf3 exit
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theScales\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf9 scale down proportionally\cf3 , \cf9 scale to fit\cf3 , \cf9 scale none\cf3 , \cf9 scale proportionally\cf3 \}\
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 i\cf3  
\f1\b \cf3 from
\f0\b0 \cf3  \cf8 1\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 count
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theScales\cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theScales\cf3  = \cf7 imageScale\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			(\cf7 imageView's\cf3  \cf11 setImageScaling\cf3 :(\cf7 i\cf3  - \cf8 1\cf3 ))\
			
\f1\b \cf3 exit
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 imageView\cf3 , \cf7 theBottom\cf3  + \cf7 viewHeight\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createImageViewMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 createButtonsViewMainThread\cf3 :\cf7 theArg\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \{\cf7 buttonList\cf3 , \cf7 buttonKeysList\cf3 , \cf7 equalWidths\cf3 , \cf7 cancelIndex\cf3 , \cf7 okIndex\cf3 \} 
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 theArg\cf3  
\f1\b \cf3 as
\f0\b0 \cf3  
\f2 \cf6 list
\f0 \cf3 \
	
\f1\b \cf3 copy
\f0\b0 \cf3  \cf7 minimumButtonWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 minButtonWidth\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 count
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonList\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonKeysCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f1\b \cf10 count
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonKeysList\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 allButtons\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\} \cf2 -- to hold list\cf3 \
	\cf2 --create buttons\cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 minAccViewWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 0\cf3 \
	
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 i\cf3  
\f1\b \cf3 from
\f0\b0 \cf3  \cf7 buttonCount\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf8 1\cf3  
\f1\b \cf3 by
\f0\b0 \cf3  \cf8 -1\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thisButton\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  (\cf7 NSButton's\cf3  \cf11 alloc\cf3 ()'s \cf11 initWithFrame\cf3 :\{\{\cf8 0\cf3 , \cf7 buttonYValue\cf3 \}, \{\cf7 minButtonWidth\cf3 , \cf8 32\cf3 \}\})\
		(\cf7 thisButton's\cf3  \cf11 setButtonType\cf3 :\cf7 NSMomentaryPushInButton\cf3 )\
		(\cf7 thisButton's\cf3  \cf11 setBezelStyle\cf3 :\cf7 NSRoundedBezelStyle\cf3 )\
		(\cf7 thisButton's\cf3  \cf11 setImagePosition\cf3 :\cf7 NSNoImage\cf3 )\
		(\cf7 thisButton's\cf3  \cf11 setTag\cf3 :\cf7 i\cf3 )\
		(\cf7 thisButton's\cf3  \cf11 setTitle\cf3 :(
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonList\cf3 ))\
		(\cf7 thisButton's\cf3  \cf11 setTarget\cf3 :
\f1\b \cf3 me
\f0\b0 \cf3 )\
		(\cf7 thisButton's\cf3  \cf11 setAction\cf3 :\cf3 "closeTheWindow:"\cf3 )\
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 asButtonNumber\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 buttonCount\cf3  - \cf7 i\cf3  + \cf8 1\cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 i\cf3  = \cf7 cancelIndex\cf3  
\f1\b \cf3 or
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonList\cf3  = \cf7 cancelIndex\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  \cf2 -- make esc the shortcut\cf3 \
			(\cf7 thisButton's\cf3  \cf11 setKeyEquivalent\cf3 :(
\f2 \cf6 character
\f0 \cf3  \cf9 id\cf3  \cf8 27\cf3 ))\
			(\cf7 thisButton's\cf3  \cf11 setTag\cf3 :\cf7 NSModalResponseCancel\cf3 )\
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 i\cf3  = \cf7 okIndex\cf3  
\f1\b \cf3 or
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonList\cf3  = \cf7 okIndex\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  \cf2 -- make return/enter the shortcut\cf3 \
			(\cf7 thisButton's\cf3  \cf11 setKeyEquivalent\cf3 :
\f2 \cf4 return
\f0 \cf3 )\
		
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 i\cf3  \uc0\u8804  \cf7 buttonKeysCount\cf3  
\f1\b \cf3 and
\f0\b0 \cf3  
\f2 \cf4 length
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonKeysList\cf3  > \cf8 0\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  \cf2 -- add shortcut\cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theKey\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 character
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf7 i\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 buttonKeysList\cf3 \
			(\cf7 thisButton's\cf3  \cf11 setKeyEquivalent\cf3 :\cf7 theKey\cf3 )\
			(\cf7 thisButton's\cf3  \cf11 setKeyEquivalentModifierMask\cf3 :\cf7 NSCommandKeyMask\cf3 )\
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		\cf2 -- resize to fit\cf3 \
		(\cf7 thisButton's\cf3  \cf11 setFrameSize\cf3 :(\cf7 thisButton's\cf3  \cf11 fittingSize\cf3 ()))\
		
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 beginning
\f0\b0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 allButtons\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 thisButton\cf3 \
		\cf2 -- keep track of width of widest button\cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 thisButton's\cf3  \cf11 frame\cf3 ()\
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f2 \cf6 class
\f0 \cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3  
\f1\b \cf3 is
\f0\b0 \cf3  
\f2 \cf6 record
\f0 \cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thisWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 width\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonHeight\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 height\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 |size|\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
		
\f1\b \cf3 else
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thisWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 1\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 buttonHeight\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  
\f2 \cf6 item
\f0 \cf3  \cf8 2\cf3  
\f1\b \cf3 of
\f0\b0 \cf3  \cf7 theFrame\cf3 \
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  
\f1\b \cf3 not
\f0\b0 \cf3  \cf7 equalWidths\cf3  
\f1\b \cf3 and
\f0\b0 \cf3  \cf7 thisWidth\cf3  < \cf7 minimumButtonWidth\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
			
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 thisWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 minimumButtonWidth\cf3 \
			(\cf7 thisButton's\cf3  \cf11 setFrameSize\cf3 :\{\cf7 thisWidth\cf3 , \cf7 buttonHeight\cf3 \})\
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 minAccViewWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 minAccViewWidth\cf3  + \cf7 thisWidth\cf3 \
		
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 thisWidth\cf3  > \cf7 minButtonWidth\cf3  
\f1\b \cf3 then
\f0\b0 \cf3  
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 minButtonWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 thisWidth\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 equalWidths\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf2 -- resize them all to the size of the biggest\cf3 \
		
\f1\b \cf3 repeat
\f0\b0 \cf3  
\f1\b \cf3 with
\f0\b0 \cf3  \cf7 aButton\cf3  
\f1\b \cf3 in
\f0\b0 \cf3  \cf7 allButtons\cf3 \
			(\cf7 aButton's\cf3  \cf11 setFrameSize\cf3 :\{\cf7 minButtonWidth\cf3 , \cf7 buttonHeight\cf3 \})\
		
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 repeat
\f0\b0 \cf3 \
		
\f1\b \cf3 set
\f0\b0 \cf3  \cf7 minAccViewWidth\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \cf7 buttonCount\cf3  * \cf7 minButtonWidth\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 set
\f0\b0 \cf3  
\f1\b \cf3 my
\f0\b0 \cf3  \cf7 handlerResult\cf3  
\f1\b \cf3 to
\f0\b0 \cf3  \{\cf7 allButtons\cf3 , \cf7 minAccViewWidth\cf3 \}\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 createButtonsViewMainThread\cf11 :\cf3 \
\

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 closeTheWindow\cf3 :\cf7 theButton\cf3 \
	(\cf7 NSApp\cf3 )'s \cf11 stopModalWithCode\cf3 :(\cf7 theButton's\cf3  \cf11 tag\cf3 ())\

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 closeTheWindow\cf11 :\cf3 \
\
\cf2 -- text field delegate methods so designated fields accept tab, enter and return keys\cf3 \

\f1\b \cf3 on
\f0\b0 \cf3  \cf11 control\cf3 :\cf7 theControl\cf3  \cf11 textView\cf3 :\cf7 theTextView\cf3  \cf11 doCommandBySelector\cf3 :\cf7 theSel\cf3 \
	
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 theSel\cf3  = \cf3 "insertNewline:"\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf7 theTextView's\cf3  \cf11 insertNewlineIgnoringFieldEditor\cf3 :
\f1\b \cf3 me
\f0\b0 \cf3 \
		
\f1\b \cf3 return
\f0\b0 \cf3  \cf9 true\cf3 \
	
\f1\b \cf3 else
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3  \cf7 theSel\cf3  = \cf3 "insertTab:"\cf3  
\f1\b \cf3 then
\f0\b0 \cf3 \
		\cf7 theTextView's\cf3  \cf11 insertTabIgnoringFieldEditor\cf3 :
\f1\b \cf3 me
\f0\b0 \cf3 \
		
\f1\b \cf3 return
\f0\b0 \cf3  \cf9 true\cf3 \
	
\f1\b \cf3 end
\f0\b0 \cf3  
\f1\b \cf3 if
\f0\b0 \cf3 \
	
\f1\b \cf3 return
\f0\b0 \cf3  \cf9 false\cf3 \

\f1\b \cf3 end
\f0\b0 \cf3  \cf11 control\cf11 :\cf11 textView\cf11 :\cf11 doCommandBySelector\cf11 :\cf3 \
}